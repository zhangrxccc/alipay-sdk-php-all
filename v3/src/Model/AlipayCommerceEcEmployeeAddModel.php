<?php
/**
 * AlipayCommerceEcEmployeeAddModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-04-28
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * AlipayCommerceEcEmployeeAddModel Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AlipayCommerceEcEmployeeAddModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayCommerceEcEmployeeAddModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'departmentIds' => 'string[]',
        'employeeCertNo' => 'string',
        'employeeCertType' => 'string',
        'employeeEmail' => 'string',
        'employeeMobile' => 'string',
        'employeeName' => 'string',
        'employeeNo' => 'string',
        'encryptCertNo' => 'string',
        'encryptMobile' => 'string',
        'enterpriseId' => 'string',
        'identity' => 'string',
        'identityOpenId' => 'string',
        'identityType' => 'string',
        'iotCheckType' => 'string',
        'iotVid' => 'string',
        'profiles' => 'string',
        'roleList' => 'string[]',
        'signReturnUrl' => 'string',
        'signUrlCarryInfo' => 'bool',
        'withholdingSignStr' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'departmentIds' => null,
        'employeeCertNo' => null,
        'employeeCertType' => null,
        'employeeEmail' => null,
        'employeeMobile' => null,
        'employeeName' => null,
        'employeeNo' => null,
        'encryptCertNo' => null,
        'encryptMobile' => null,
        'enterpriseId' => null,
        'identity' => null,
        'identityOpenId' => null,
        'identityType' => null,
        'iotCheckType' => null,
        'iotVid' => null,
        'profiles' => null,
        'roleList' => null,
        'signReturnUrl' => null,
        'signUrlCarryInfo' => null,
        'withholdingSignStr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'departmentIds' => 'department_ids',
        'employeeCertNo' => 'employee_cert_no',
        'employeeCertType' => 'employee_cert_type',
        'employeeEmail' => 'employee_email',
        'employeeMobile' => 'employee_mobile',
        'employeeName' => 'employee_name',
        'employeeNo' => 'employee_no',
        'encryptCertNo' => 'encrypt_cert_no',
        'encryptMobile' => 'encrypt_mobile',
        'enterpriseId' => 'enterprise_id',
        'identity' => 'identity',
        'identityOpenId' => 'identity_open_id',
        'identityType' => 'identity_type',
        'iotCheckType' => 'iot_check_type',
        'iotVid' => 'iot_vid',
        'profiles' => 'profiles',
        'roleList' => 'role_list',
        'signReturnUrl' => 'sign_return_url',
        'signUrlCarryInfo' => 'sign_url_carry_info',
        'withholdingSignStr' => 'withholding_sign_str'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'departmentIds' => 'setDepartmentIds',
        'employeeCertNo' => 'setEmployeeCertNo',
        'employeeCertType' => 'setEmployeeCertType',
        'employeeEmail' => 'setEmployeeEmail',
        'employeeMobile' => 'setEmployeeMobile',
        'employeeName' => 'setEmployeeName',
        'employeeNo' => 'setEmployeeNo',
        'encryptCertNo' => 'setEncryptCertNo',
        'encryptMobile' => 'setEncryptMobile',
        'enterpriseId' => 'setEnterpriseId',
        'identity' => 'setIdentity',
        'identityOpenId' => 'setIdentityOpenId',
        'identityType' => 'setIdentityType',
        'iotCheckType' => 'setIotCheckType',
        'iotVid' => 'setIotVid',
        'profiles' => 'setProfiles',
        'roleList' => 'setRoleList',
        'signReturnUrl' => 'setSignReturnUrl',
        'signUrlCarryInfo' => 'setSignUrlCarryInfo',
        'withholdingSignStr' => 'setWithholdingSignStr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'departmentIds' => 'getDepartmentIds',
        'employeeCertNo' => 'getEmployeeCertNo',
        'employeeCertType' => 'getEmployeeCertType',
        'employeeEmail' => 'getEmployeeEmail',
        'employeeMobile' => 'getEmployeeMobile',
        'employeeName' => 'getEmployeeName',
        'employeeNo' => 'getEmployeeNo',
        'encryptCertNo' => 'getEncryptCertNo',
        'encryptMobile' => 'getEncryptMobile',
        'enterpriseId' => 'getEnterpriseId',
        'identity' => 'getIdentity',
        'identityOpenId' => 'getIdentityOpenId',
        'identityType' => 'getIdentityType',
        'iotCheckType' => 'getIotCheckType',
        'iotVid' => 'getIotVid',
        'profiles' => 'getProfiles',
        'roleList' => 'getRoleList',
        'signReturnUrl' => 'getSignReturnUrl',
        'signUrlCarryInfo' => 'getSignUrlCarryInfo',
        'withholdingSignStr' => 'getWithholdingSignStr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['departmentIds'] = $data['departmentIds'] ?? null;
        $this->container['employeeCertNo'] = $data['employeeCertNo'] ?? null;
        $this->container['employeeCertType'] = $data['employeeCertType'] ?? null;
        $this->container['employeeEmail'] = $data['employeeEmail'] ?? null;
        $this->container['employeeMobile'] = $data['employeeMobile'] ?? null;
        $this->container['employeeName'] = $data['employeeName'] ?? null;
        $this->container['employeeNo'] = $data['employeeNo'] ?? null;
        $this->container['encryptCertNo'] = $data['encryptCertNo'] ?? null;
        $this->container['encryptMobile'] = $data['encryptMobile'] ?? null;
        $this->container['enterpriseId'] = $data['enterpriseId'] ?? null;
        $this->container['identity'] = $data['identity'] ?? null;
        $this->container['identityOpenId'] = $data['identityOpenId'] ?? null;
        $this->container['identityType'] = $data['identityType'] ?? null;
        $this->container['iotCheckType'] = $data['iotCheckType'] ?? null;
        $this->container['iotVid'] = $data['iotVid'] ?? null;
        $this->container['profiles'] = $data['profiles'] ?? null;
        $this->container['roleList'] = $data['roleList'] ?? null;
        $this->container['signReturnUrl'] = $data['signReturnUrl'] ?? null;
        $this->container['signUrlCarryInfo'] = $data['signUrlCarryInfo'] ?? null;
        $this->container['withholdingSignStr'] = $data['withholdingSignStr'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets departmentIds
     *
     * @return string[]|null
     */
    public function getDepartmentIds()
    {
        return $this->container['departmentIds'];
    }

    /**
     * Sets departmentIds
     *
     * @param string[]|null $departmentIds 员工所属部门
     *
     * @return self
     */
    public function setDepartmentIds($departmentIds)
    {
        $this->container['departmentIds'] = $departmentIds;

        return $this;
    }

    /**
     * Gets employeeCertNo
     *
     * @return string|null
     */
    public function getEmployeeCertNo()
    {
        return $this->container['employeeCertNo'];
    }

    /**
     * Sets employeeCertNo
     *
     * @param string|null $employeeCertNo 证件号码，根据employee_cert_type指定的证件类型，传入对应的证件号码，用于企业人脸库员工刷脸开通时的核验。
     *
     * @return self
     */
    public function setEmployeeCertNo($employeeCertNo)
    {
        $this->container['employeeCertNo'] = $employeeCertNo;

        return $this;
    }

    /**
     * Gets employeeCertType
     *
     * @return string|null
     */
    public function getEmployeeCertType()
    {
        return $this->container['employeeCertType'];
    }

    /**
     * Sets employeeCertType
     *
     * @param string|null $employeeCertType 证件类型，用于企业人脸库员工刷脸开通时的核验
     *
     * @return self
     */
    public function setEmployeeCertType($employeeCertType)
    {
        $this->container['employeeCertType'] = $employeeCertType;

        return $this;
    }

    /**
     * Gets employeeEmail
     *
     * @return string|null
     */
    public function getEmployeeEmail()
    {
        return $this->container['employeeEmail'];
    }

    /**
     * Sets employeeEmail
     *
     * @param string|null $employeeEmail 员工邮箱
     *
     * @return self
     */
    public function setEmployeeEmail($employeeEmail)
    {
        $this->container['employeeEmail'] = $employeeEmail;

        return $this;
    }

    /**
     * Gets employeeMobile
     *
     * @return string|null
     */
    public function getEmployeeMobile()
    {
        return $this->container['employeeMobile'];
    }

    /**
     * Sets employeeMobile
     *
     * @param string|null $employeeMobile 员工手机号
     *
     * @return self
     */
    public function setEmployeeMobile($employeeMobile)
    {
        $this->container['employeeMobile'] = $employeeMobile;

        return $this;
    }

    /**
     * Gets employeeName
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employeeName'];
    }

    /**
     * Sets employeeName
     *
     * @param string|null $employeeName 员工姓名
     *
     * @return self
     */
    public function setEmployeeName($employeeName)
    {
        $this->container['employeeName'] = $employeeName;

        return $this;
    }

    /**
     * Gets employeeNo
     *
     * @return string|null
     */
    public function getEmployeeNo()
    {
        return $this->container['employeeNo'];
    }

    /**
     * Sets employeeNo
     *
     * @param string|null $employeeNo 员工编号/工号
     *
     * @return self
     */
    public function setEmployeeNo($employeeNo)
    {
        $this->container['employeeNo'] = $employeeNo;

        return $this;
    }

    /**
     * Gets encryptCertNo
     *
     * @return string|null
     */
    public function getEncryptCertNo()
    {
        return $this->container['encryptCertNo'];
    }

    /**
     * Sets encryptCertNo
     *
     * @param string|null $encryptCertNo 加密证件号（默认转大写后用SHA256加密）与证件类型搭配使用，不可与证件号同时存在
     *
     * @return self
     */
    public function setEncryptCertNo($encryptCertNo)
    {
        $this->container['encryptCertNo'] = $encryptCertNo;

        return $this;
    }

    /**
     * Gets encryptMobile
     *
     * @return string|null
     */
    public function getEncryptMobile()
    {
        return $this->container['encryptMobile'];
    }

    /**
     * Sets encryptMobile
     *
     * @param string|null $encryptMobile 加密手机号（默认使用SHA256加密，不可与手机号同时存在）
     *
     * @return self
     */
    public function setEncryptMobile($encryptMobile)
    {
        $this->container['encryptMobile'] = $encryptMobile;

        return $this;
    }

    /**
     * Gets enterpriseId
     *
     * @return string|null
     */
    public function getEnterpriseId()
    {
        return $this->container['enterpriseId'];
    }

    /**
     * Sets enterpriseId
     *
     * @param string|null $enterpriseId 企业id
     *
     * @return self
     */
    public function setEnterpriseId($enterpriseId)
    {
        $this->container['enterpriseId'] = $enterpriseId;

        return $this;
    }

    /**
     * Gets identity
     *
     * @return string|null
     */
    public function getIdentity()
    {
        return $this->container['identity'];
    }

    /**
     * Sets identity
     *
     * @param string|null $identity 员工身份标识
     *
     * @return self
     */
    public function setIdentity($identity)
    {
        $this->container['identity'] = $identity;

        return $this;
    }

    /**
     * Gets identityOpenId
     *
     * @return string|null
     */
    public function getIdentityOpenId()
    {
        return $this->container['identityOpenId'];
    }

    /**
     * Sets identityOpenId
     *
     * @param string|null $identityOpenId 当identity_type为ALIPAY_USER_ID时，此字段传入open_id
     *
     * @return self
     */
    public function setIdentityOpenId($identityOpenId)
    {
        $this->container['identityOpenId'] = $identityOpenId;

        return $this;
    }

    /**
     * Gets identityType
     *
     * @return string|null
     */
    public function getIdentityType()
    {
        return $this->container['identityType'];
    }

    /**
     * Sets identityType
     *
     * @param string|null $identityType 身份类型
     *
     * @return self
     */
    public function setIdentityType($identityType)
    {
        $this->container['identityType'] = $identityType;

        return $this;
    }

    /**
     * Gets iotCheckType
     *
     * @return string|null
     */
    public function getIotCheckType()
    {
        return $this->container['iotCheckType'];
    }

    /**
     * Sets iotCheckType
     *
     * @param string|null $iotCheckType 员工刷脸加入企业人脸库时的核验方式
     *
     * @return self
     */
    public function setIotCheckType($iotCheckType)
    {
        $this->container['iotCheckType'] = $iotCheckType;

        return $this;
    }

    /**
     * Gets iotVid
     *
     * @return string|null
     * @deprecated
     */
    public function getIotVid()
    {
        return $this->container['iotVid'];
    }

    /**
     * Sets iotVid
     *
     * @param string|null $iotVid 员工在企业人脸库的人脸唯一标识（该字段已作废，不支持自定义传入）(iot不支持自定义传入)
     *
     * @return self
     * @deprecated
     */
    public function setIotVid($iotVid)
    {
        $this->container['iotVid'] = $iotVid;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return string|null
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param string|null $profiles 员工个性化信息
     *
     * @return self
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets roleList
     *
     * @return string[]|null
     */
    public function getRoleList()
    {
        return $this->container['roleList'];
    }

    /**
     * Sets roleList
     *
     * @param string[]|null $roleList 角色列表，目前只支持填一种角色，默认为USER
     *
     * @return self
     */
    public function setRoleList($roleList)
    {
        $this->container['roleList'] = $roleList;

        return $this;
    }

    /**
     * Gets signReturnUrl
     *
     * @return string|null
     */
    public function getSignReturnUrl()
    {
        return $this->container['signReturnUrl'];
    }

    /**
     * Sets signReturnUrl
     *
     * @param string|null $signReturnUrl 员工签约后回跳地址
     *
     * @return self
     */
    public function setSignReturnUrl($signReturnUrl)
    {
        $this->container['signReturnUrl'] = $signReturnUrl;

        return $this;
    }

    /**
     * Gets signUrlCarryInfo
     *
     * @return bool|null
     */
    public function getSignUrlCarryInfo()
    {
        return $this->container['signUrlCarryInfo'];
    }

    /**
     * Sets signUrlCarryInfo
     *
     * @param bool|null $signUrlCarryInfo 签约链接是否需要携带员工身份信息(手机/邮箱)
     *
     * @return self
     */
    public function setSignUrlCarryInfo($signUrlCarryInfo)
    {
        $this->container['signUrlCarryInfo'] = $signUrlCarryInfo;

        return $this;
    }

    /**
     * Gets withholdingSignStr
     *
     * @return string|null
     */
    public function getWithholdingSignStr()
    {
        return $this->container['withholdingSignStr'];
    }

    /**
     * Sets withholdingSignStr
     *
     * @param string|null $withholdingSignStr 代扣签约串，需调代扣接口获取签约串 <a href='https://opendocs.alipay.com/pre-open/20170601105911096277new/moiixx?pathHash=10b1fa66'>参考文档</a>
     *
     * @return self
     */
    public function setWithholdingSignStr($withholdingSignStr)
    {
        $this->container['withholdingSignStr'] = $withholdingSignStr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


