<?php
/**
 * ItemInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-04-18
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * ItemInfo Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ItemInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ItemInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'itemIds' => 'string[]',
        'itemImgs' => 'string[]',
        'itemLink' => 'string',
        'itemName' => 'string',
        'itemText' => 'string',
        'maxDiscountNum' => 'string',
        'minConsumeNum' => 'string',
        'originalPrice' => 'string',
        'skuMinConsume' => 'string',
        'totalMaxDiscountNum' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'itemIds' => null,
        'itemImgs' => null,
        'itemLink' => null,
        'itemName' => null,
        'itemText' => null,
        'maxDiscountNum' => null,
        'minConsumeNum' => null,
        'originalPrice' => null,
        'skuMinConsume' => null,
        'totalMaxDiscountNum' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'itemIds' => 'item_ids',
        'itemImgs' => 'item_imgs',
        'itemLink' => 'item_link',
        'itemName' => 'item_name',
        'itemText' => 'item_text',
        'maxDiscountNum' => 'max_discount_num',
        'minConsumeNum' => 'min_consume_num',
        'originalPrice' => 'original_price',
        'skuMinConsume' => 'sku_min_consume',
        'totalMaxDiscountNum' => 'total_max_discount_num'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'itemIds' => 'setItemIds',
        'itemImgs' => 'setItemImgs',
        'itemLink' => 'setItemLink',
        'itemName' => 'setItemName',
        'itemText' => 'setItemText',
        'maxDiscountNum' => 'setMaxDiscountNum',
        'minConsumeNum' => 'setMinConsumeNum',
        'originalPrice' => 'setOriginalPrice',
        'skuMinConsume' => 'setSkuMinConsume',
        'totalMaxDiscountNum' => 'setTotalMaxDiscountNum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'itemIds' => 'getItemIds',
        'itemImgs' => 'getItemImgs',
        'itemLink' => 'getItemLink',
        'itemName' => 'getItemName',
        'itemText' => 'getItemText',
        'maxDiscountNum' => 'getMaxDiscountNum',
        'minConsumeNum' => 'getMinConsumeNum',
        'originalPrice' => 'getOriginalPrice',
        'skuMinConsume' => 'getSkuMinConsume',
        'totalMaxDiscountNum' => 'getTotalMaxDiscountNum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['itemIds'] = $data['itemIds'] ?? null;
        $this->container['itemImgs'] = $data['itemImgs'] ?? null;
        $this->container['itemLink'] = $data['itemLink'] ?? null;
        $this->container['itemName'] = $data['itemName'] ?? null;
        $this->container['itemText'] = $data['itemText'] ?? null;
        $this->container['maxDiscountNum'] = $data['maxDiscountNum'] ?? null;
        $this->container['minConsumeNum'] = $data['minConsumeNum'] ?? null;
        $this->container['originalPrice'] = $data['originalPrice'] ?? null;
        $this->container['skuMinConsume'] = $data['skuMinConsume'] ?? null;
        $this->container['totalMaxDiscountNum'] = $data['totalMaxDiscountNum'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets itemIds
     *
     * @return string[]|null
     */
    public function getItemIds()
    {
        return $this->container['itemIds'];
    }

    /**
     * Sets itemIds
     *
     * @param string[]|null $itemIds 券适用的单品码列表  最少配置1个单品码  最多配置500个单品码
     *
     * @return self
     */
    public function setItemIds($itemIds)
    {
        $this->container['itemIds'] = $itemIds;

        return $this;
    }

    /**
     * Gets itemImgs
     *
     * @return string[]|null
     */
    public function getItemImgs()
    {
        return $this->container['itemImgs'];
    }

    /**
     * Sets itemImgs
     *
     * @param string[]|null $itemImgs 单品图片列表  单品图片不能超过3张
     *
     * @return self
     */
    public function setItemImgs($itemImgs)
    {
        $this->container['itemImgs'] = $itemImgs;

        return $this;
    }

    /**
     * Gets itemLink
     *
     * @return string|null
     */
    public function getItemLink()
    {
        return $this->container['itemLink'];
    }

    /**
     * Sets itemLink
     *
     * @param string|null $itemLink 单品券详细介绍跳转链接
     *
     * @return self
     */
    public function setItemLink($itemLink)
    {
        $this->container['itemLink'] = $itemLink;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string|null $itemName 单品名称
     *
     * @return self
     */
    public function setItemName($itemName)
    {
        $this->container['itemName'] = $itemName;

        return $this;
    }

    /**
     * Gets itemText
     *
     * @return string|null
     */
    public function getItemText()
    {
        return $this->container['itemText'];
    }

    /**
     * Sets itemText
     *
     * @param string|null $itemText 单品券说明
     *
     * @return self
     */
    public function setItemText($itemText)
    {
        $this->container['itemText'] = $itemText;

        return $this;
    }

    /**
     * Gets maxDiscountNum
     *
     * @return string|null
     */
    public function getMaxDiscountNum()
    {
        return $this->container['maxDiscountNum'];
    }

    /**
     * Sets maxDiscountNum
     *
     * @param string|null $maxDiscountNum 单品券适用的商品列表中，每一个商品最高可享受优惠的件数；    如：券适用于A,B两种商品，该字段设置为1，则用券A,B两种商品每种最多只有一件可享受优惠；
     *
     * @return self
     */
    public function setMaxDiscountNum($maxDiscountNum)
    {
        $this->container['maxDiscountNum'] = $maxDiscountNum;

        return $this;
    }

    /**
     * Gets minConsumeNum
     *
     * @return string|null
     */
    public function getMinConsumeNum()
    {
        return $this->container['minConsumeNum'];
    }

    /**
     * Sets minConsumeNum
     *
     * @param string|null $minConsumeNum 单品券适用商品列表中，每种商品享受优惠最低购买件数的门槛；  如：券适用于A,B两种商品，该字段设置为3，则A,B两种商品每种最少需要购买3件才可享受优惠；
     *
     * @return self
     */
    public function setMinConsumeNum($minConsumeNum)
    {
        $this->container['minConsumeNum'] = $minConsumeNum;

        return $this;
    }

    /**
     * Gets originalPrice
     *
     * @return string|null
     */
    public function getOriginalPrice()
    {
        return $this->container['originalPrice'];
    }

    /**
     * Sets originalPrice
     *
     * @param string|null $originalPrice 单品的原价，单位元  必须为合法金额类型字符串，如9.99
     *
     * @return self
     */
    public function setOriginalPrice($originalPrice)
    {
        $this->container['originalPrice'] = $originalPrice;

        return $this;
    }

    /**
     * Gets skuMinConsume
     *
     * @return string|null
     */
    public function getSkuMinConsume()
    {
        return $this->container['skuMinConsume'];
    }

    /**
     * Sets skuMinConsume
     *
     * @param string|null $skuMinConsume 券适用SKU的最低消费金额门槛  如券适用A,B两个SKU，该字段设置的值为100，则订单中购买A,B两个SKU的合计金额需大于100元才可用券
     *
     * @return self
     */
    public function setSkuMinConsume($skuMinConsume)
    {
        $this->container['skuMinConsume'] = $skuMinConsume;

        return $this;
    }

    /**
     * Gets totalMaxDiscountNum
     *
     * @return string|null
     */
    public function getTotalMaxDiscountNum()
    {
        return $this->container['totalMaxDiscountNum'];
    }

    /**
     * Sets totalMaxDiscountNum
     *
     * @param string|null $totalMaxDiscountNum 如果一个单品券适用A，B，C三个单品，若设置了该字段为2，则在一笔交易中，A，B，C三个单品加起来最多只有俩件能够享受优惠
     *
     * @return self
     */
    public function setTotalMaxDiscountNum($totalMaxDiscountNum)
    {
        $this->container['totalMaxDiscountNum'] = $totalMaxDiscountNum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


