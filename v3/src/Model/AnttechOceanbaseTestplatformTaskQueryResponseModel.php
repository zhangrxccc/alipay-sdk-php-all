<?php
/**
 * AnttechOceanbaseTestplatformTaskQueryResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2024-04-28
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Alipay\OpenAPISDK\Model;

use \ArrayAccess;
use \Alipay\OpenAPISDK\ObjectSerializer;

/**
 * AnttechOceanbaseTestplatformTaskQueryResponseModel Class Doc Comment
 *
 * @category Class
 * @package  Alipay\OpenAPISDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AnttechOceanbaseTestplatformTaskQueryResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnttechOceanbaseTestplatformTaskQueryResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'branch' => 'string',
        'commitId' => 'string',
        'currentRetry' => 'string',
        'gitRepo' => 'string',
        'gmtCreate' => 'string',
        'player' => 'string',
        'resultType' => 'int',
        'taskId' => 'int',
        'testCases' => 'string',
        'testInfo' => 'string',
        'testSuite' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'branch' => null,
        'commitId' => null,
        'currentRetry' => null,
        'gitRepo' => null,
        'gmtCreate' => null,
        'player' => null,
        'resultType' => null,
        'taskId' => null,
        'testCases' => null,
        'testInfo' => null,
        'testSuite' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'commitId' => 'commit_id',
        'currentRetry' => 'current_retry',
        'gitRepo' => 'git_repo',
        'gmtCreate' => 'gmt_create',
        'player' => 'player',
        'resultType' => 'result_type',
        'taskId' => 'task_id',
        'testCases' => 'test_cases',
        'testInfo' => 'test_info',
        'testSuite' => 'test_suite'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'commitId' => 'setCommitId',
        'currentRetry' => 'setCurrentRetry',
        'gitRepo' => 'setGitRepo',
        'gmtCreate' => 'setGmtCreate',
        'player' => 'setPlayer',
        'resultType' => 'setResultType',
        'taskId' => 'setTaskId',
        'testCases' => 'setTestCases',
        'testInfo' => 'setTestInfo',
        'testSuite' => 'setTestSuite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'commitId' => 'getCommitId',
        'currentRetry' => 'getCurrentRetry',
        'gitRepo' => 'getGitRepo',
        'gmtCreate' => 'getGmtCreate',
        'player' => 'getPlayer',
        'resultType' => 'getResultType',
        'taskId' => 'getTaskId',
        'testCases' => 'getTestCases',
        'testInfo' => 'getTestInfo',
        'testSuite' => 'getTestSuite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = $data['branch'] ?? null;
        $this->container['commitId'] = $data['commitId'] ?? null;
        $this->container['currentRetry'] = $data['currentRetry'] ?? null;
        $this->container['gitRepo'] = $data['gitRepo'] ?? null;
        $this->container['gmtCreate'] = $data['gmtCreate'] ?? null;
        $this->container['player'] = $data['player'] ?? null;
        $this->container['resultType'] = $data['resultType'] ?? null;
        $this->container['taskId'] = $data['taskId'] ?? null;
        $this->container['testCases'] = $data['testCases'] ?? null;
        $this->container['testInfo'] = $data['testInfo'] ?? null;
        $this->container['testSuite'] = $data['testSuite'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch 提测代码的分支
     *
     * @return self
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets commitId
     *
     * @return string|null
     */
    public function getCommitId()
    {
        return $this->container['commitId'];
    }

    /**
     * Sets commitId
     *
     * @param string|null $commitId 提测代码仓库的commit id
     *
     * @return self
     */
    public function setCommitId($commitId)
    {
        $this->container['commitId'] = $commitId;

        return $this;
    }

    /**
     * Gets currentRetry
     *
     * @return string|null
     */
    public function getCurrentRetry()
    {
        return $this->container['currentRetry'];
    }

    /**
     * Sets currentRetry
     *
     * @param string|null $currentRetry 当前任务的运行（重试）次数
     *
     * @return self
     */
    public function setCurrentRetry($currentRetry)
    {
        $this->container['currentRetry'] = $currentRetry;

        return $this;
    }

    /**
     * Gets gitRepo
     *
     * @return string|null
     */
    public function getGitRepo()
    {
        return $this->container['gitRepo'];
    }

    /**
     * Sets gitRepo
     *
     * @param string|null $gitRepo 代码仓库的url
     *
     * @return self
     */
    public function setGitRepo($gitRepo)
    {
        $this->container['gitRepo'] = $gitRepo;

        return $this;
    }

    /**
     * Gets gmtCreate
     *
     * @return string|null
     */
    public function getGmtCreate()
    {
        return $this->container['gmtCreate'];
    }

    /**
     * Sets gmtCreate
     *
     * @param string|null $gmtCreate 任务创建的时间戳
     *
     * @return self
     */
    public function setGmtCreate($gmtCreate)
    {
        $this->container['gmtCreate'] = $gmtCreate;

        return $this;
    }

    /**
     * Gets player
     *
     * @return string|null
     */
    public function getPlayer()
    {
        return $this->container['player'];
    }

    /**
     * Sets player
     *
     * @param string|null $player 参赛选手的名字
     *
     * @return self
     */
    public function setPlayer($player)
    {
        $this->container['player'] = $player;

        return $this;
    }

    /**
     * Gets resultType
     *
     * @return int|null
     */
    public function getResultType()
    {
        return $this->container['resultType'];
    }

    /**
     * Sets resultType
     *
     * @param int|null $resultType 提测结果类型 默认1
     *
     * @return self
     */
    public function setResultType($resultType)
    {
        $this->container['resultType'] = $resultType;

        return $this;
    }

    /**
     * Gets taskId
     *
     * @return int|null
     */
    public function getTaskId()
    {
        return $this->container['taskId'];
    }

    /**
     * Sets taskId
     *
     * @param int|null $taskId 测试任务的Id
     *
     * @return self
     */
    public function setTaskId($taskId)
    {
        $this->container['taskId'] = $taskId;

        return $this;
    }

    /**
     * Gets testCases
     *
     * @return string|null
     */
    public function getTestCases()
    {
        return $this->container['testCases'];
    }

    /**
     * Sets testCases
     *
     * @param string|null $testCases 二级提测题目
     *
     * @return self
     */
    public function setTestCases($testCases)
    {
        $this->container['testCases'] = $testCases;

        return $this;
    }

    /**
     * Gets testInfo
     *
     * @return string|null
     */
    public function getTestInfo()
    {
        return $this->container['testInfo'];
    }

    /**
     * Sets testInfo
     *
     * @param string|null $testInfo 测试题目
     *
     * @return self
     */
    public function setTestInfo($testInfo)
    {
        $this->container['testInfo'] = $testInfo;

        return $this;
    }

    /**
     * Gets testSuite
     *
     * @return string|null
     */
    public function getTestSuite()
    {
        return $this->container['testSuite'];
    }

    /**
     * Sets testSuite
     *
     * @param string|null $testSuite 一级提测题目
     *
     * @return self
     */
    public function setTestSuite($testSuite)
    {
        $this->container['testSuite'] = $testSuite;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


